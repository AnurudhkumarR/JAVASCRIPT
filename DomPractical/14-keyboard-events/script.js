// const h1 = document.querySelector('h1')
const input = document.querySelector("input");
// The keypress event is deprecated in modern browsers — it might not work consistently everywhere.
// Always use keydown or keyup instead.
// keypress is designed to detect printable characters only, not key combinations or modifier keys.
// input.addEventListener("keypress", (e) => {
//   console.log(e);
// });
// window.addEventListener("keypress", (e) => {
//   console.log("Code: ", e.code);
//   console.log("Value: ", e.key);
//   notes-it is generally used in window

//   e.code → Physical key on the keyboard
// It represents which physical key was pressed — not what character it produced.
// Example: the A key is always "KeyA" — no matter if you press Shift or not, or even if you change keyboard language.

// e.key → The actual character or action produced
// It represents the value generated by the keypress.
// It depends on:
// Whether Shift is pressed
// Keyboard layout (English, French, etc.)
// Caps Lock
// });

window.addEventListener("keyup", (e) => {
  console.log("Code: ", e.code);
  console.log("Value: ", e.key);
});

// window.addEventListener("keydown", (e) => {
//   console.log("Code: ", e.code);
//   console.log("Value: ", e.key);
// });

//notes- Unfocous element can be done focuse using tabindex="0";

//  Important Difference Between Events
// Event	Fires For	  Can Detect Shift/Ctrl/Alt?	Notes

// keydown	All keys(including Shift, Ctrl, arrows, etc.) Yes Best for keyboard shortcuts
// keyup	When a key is released	 Yes	Useful for detecting when key is released
// keypress	Only printable characters	 No	Deprecated (not recommended anymore)

// =----------------
// // keyup real case-
// 1-Real-Time Search or Input Validation
// When you want to do something after the user types a full character (not while holding the key).

// 2-Detect When User Releases a Shortcut Key

// 3-Detect Key Combinations Release
// For shortcuts like Ctrl + S, you may want to perform something after all keys are released.
// 4-Resetting States After Key Press
// If you use keydown to start an animation or timer,
// use keyup to reset or stop it when the key is released.
// -----------------------------------------------------keydown---
// keydown-The keydown event fires when any key on the keyboard is pressed down (before it’s released).
// // It triggers immediately when the key is pressed — and it keeps firing repeatedly if you hold the key down.

// Why It’s So Important
// keydown is one of the most used keyboard events because it:
// Fires early (before character input happens)
// Detects all keys, including non-printable ones like Shift, Ctrl, Escape, etc.
// Works for shortcuts, navigation, and key combinations

// Real-World Use Cases for keydown
// 1-Game Controls (Movement)
// When a player presses and holds an arrow key or WASD, you want movement to start immediately.
// Used in:
// Controlling characters
// Moving objects in canvas or Three.js scenes
// 2-Detecting Keyboard Shortcuts
// You can use keydown to detect combinations like Ctrl + S, Shift + A, or Alt + Enter.
// Used in:
// Web apps like Google Docs or VS Code web editor
// Custom keyboard shortcuts or productivity tools
// 3-Detecting Special Keys
// You can check for keys that don’t type characters, like:
// Escape (to close modals)
// Enter (to submit forms)
// // Backspace (to delete)
// 4-Handling Key Combinations in Games or Apps
// Example: Hold Shift + ArrowUp to move faster.
// used in-
// Game speed boosts
// // Multi-key commands
// 5-Input Restrictions (Before Typing Happens)
// Since keydown fires before the character appears, you can stop invalid input early.
// Used in:
// Validating numeric-only or character-restricted fields
// 6- Accessibility / Navigation
// Arrow keys to move focus between buttons
// Space or Enter key to trigger actions
